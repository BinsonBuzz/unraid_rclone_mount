#!/bin/bash
###########################################################################
#                    <>       rclone_mount         <>                     #
###########################################################################
#
##################  Check if script is already running  ###################
#
sleep 1
echo "$(date "+%d.%m.%Y %T") INFO: *** Starting rclone_mount script ***"
echo "$(date "+%d.%m.%Y %T") INFO: Checking if this script is already running."

if [[ -f "/mnt/user/appdata/other/rclone/rclone_mount_running" ]]; then

echo "$(date "+%d.%m.%Y %T") INFO: Exiting script already running."

exit

else

touch /mnt/user/appdata/other/rclone/rclone_mount_running

fi

#######  End Check if script already running  ##########

########## create directories for rclone mount and mergerfs mount ##############

mkdir -p /mnt/user/local/google_vfs/{downloads/complete,downloads/intermediate,downloads/seeds,movies,tv}
mkdir -p /mnt/user/mount_rclone/google_vfs
mkdir -p /mnt/user/appdata/other/mergerfs/
mkdir -p /mnt/user/mount_mergerfs/google_vfs

#######  Start rclone gdrive mount  ##########

# check if gdrive mount already created

if [[ -f "/mnt/user/mount_rclone/google_vfs/mountcheck" ]]; then

echo "$(date "+%d.%m.%Y %T") INFO: Check rclone vfs already mounted."

else

echo "$(date "+%d.%m.%Y %T") INFO: mounting rclone vfs."

rclone mount --allow-other --buffer-size 256M --dir-cache-time 720h --drive-chunk-size 512M --log-level INFO --vfs-read-chunk-size 128M --vfs-read-chunk-size-limit off --vfs-cache-mode writes gdrive_media_vfs: /mnt/user/mount_rclone/google_vfs &

# check if mount successful with slight pause to give mount time to finalise
echo "$(date "+%d.%m.%Y %T") INFO: sleeping 5 sec"
sleep 5
echo "$(date "+%d.%m.%Y %T") INFO: continuing..."
if [[ -f "/mnt/user/mount_rclone/google_vfs/mountcheck" ]]; then

echo "$(date "+%d.%m.%Y %T") INFO: Check rclone gdrive vfs mount success."

else

echo "$(date "+%d.%m.%Y %T") CRITICAL: rclone gdrive vfs mount failed - please check for problems."

rm /mnt/user/appdata/other/rclone/rclone_mount_running

exit

fi

fi

#######  End rclone gdrive mount  ##########

#######  Start mergerfs mount  ##########

if [[ -f "/mnt/user/mount_mergerfs/google_vfs/mountcheck" ]]; then

echo "$(date "+%d.%m.%Y %T") INFO: Check successful, mergerfs already mounted."

else

# Build mergerfs binary and delete old binary as precaution
rm /bin/mergerfs

# Create Docker
docker run -v /mnt/user/appdata/other/mergerfs:/build --rm trapexit/mergerfs-static-build

# move to bin to use for commands
mv /mnt/user/appdata/other/mergerfs/mergerfs /bin

# Create mergerfs mount

mergerfs /mnt/user/local/google_vfs:/mnt/user/mount_rclone/google_vfs /mnt/user/mount_mergerfs/google_vfs -o rw,async_read=false,use_ino,allow_other,func.getattr=newest,category.action=all,category.create=ff,cache.files=partial,dropcacheonclose=true

if [[ -f "/mnt/user/mount_mergerfs/google_vfs/mountcheck" ]]; then

echo "$(date "+%d.%m.%Y %T") INFO: Check successful, mergerfs mounted."

else

echo "$(date "+%d.%m.%Y %T") CRITICAL: mergerfs Remount failed."

rm /mnt/user/appdata/other/rclone/rclone_mount_running

exit

fi

fi

#######  End Mount mergerfs   ##########

############### starting dockers that need mergerfs mount ######################

# only start dockers once

if [[ -f "/mnt/user/appdata/other/rclone/dockers_started" ]]; then

echo "$(date "+%d.%m.%Y %T") INFO: dockers already started"

else

touch /mnt/user/appdata/other/rclone/dockers_started

echo "$(date "+%d.%m.%Y %T") INFO: Starting dockers."

docker start nzbget
docker start transmission
docker start plex
docker start ombi
docker start tautulli
docker start radarr
docker start sonarr

fi

############### end dockers that need mergerfs mount ######################

rm /mnt/user/appdata/other/rclone/rclone_mount_running

exit
